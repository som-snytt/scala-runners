#!/usr/bin/env bash
#
# A dynamic scala runner, using coursier's app launch capabilities.
# Author: Dale Wijnand <dale.wijnand@gmail.com>
# https://github.com/dwijnand/scala-runners

shopt -s extglob # for extended pattern matching operators, like `+([0-9])`

app_name=$(basename "$0")

declare -r app_name
declare scala_version=latest.stable
declare -a java_args residual_args
declare verbose

declare -r scala_ea_builds_url=https://scala-ci.typesafe.com/artifactory/scala-integration
declare -r scala_pr_builds_url=https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots

echoerr() { echo >&2 "$@"; }
vlog()    { [[ -n "$verbose" ]] && echoerr "$@"; }
die()     { echo "Aborting: $*"; exit 1; }
dropR()   { echo "${1:0:$((${#1} - $2))}"; } # https://superuser.com/q/1033273 ${1:0:-5} (bash 4.2+)

checkHub() {
  if [ ! -f "${HOME}/.config/hub" ]; then
    if [ -z ${GITHUB_TOKEN+x} ]; then
      echo "No ~/.config/hub or GITHUB_TOKEN.  Triggering hub to prompt you for credentials."
      hub api
    fi
  fi
}

addJava()      {
  vlog "[addJava] arg = '$1'"
  java_args+=("-J")
  java_args+=("$1")
}
addCoursier () {
  vlog "[addCoursier] arg = '$1'"
  coursier_args+=("$1")
}
getScalaBaseVersion() {
  vlog "[getScalaBaseVersion] arg = '$1'"
  local build_sbt
  build_sbt=$(hub api -H "Accept: application/vnd.github.v3.raw" "repos/scala/scala/contents/build.sbt?ref=$1")
  [ $? -ne 0 ] && exit 1
  local base_version=$(grep -E '(baseVersion in Global|Global / baseVersion\b)' <<< "$build_sbt" | sed 's/.*"\(.*\)".*/\1/')
  local cross=$(grep -q -E '\d+\.\d+.0' <<< "$base_version" && echo "-pre" || echo "-bin")
  echo "$base_version$cross"
}
getScalaHead() {
  vlog "[getScalaHead] arg = '$1'"
  local base_version
  base_version=$(getScalaBaseVersion "heads/$1")
  [ $? -ne 0 ] && exit 1
  local refInfo=$(hub api "repos/scala/scala/git/ref/heads/$1")
  local sha=$(jq -r '.object.sha' <<< "$refInfo")
  echo "$base_version-${sha:0:7}"
}
getScalaNext() {
  vlog "[getScalaNext] arg = '$1'"
  curl -Ls "https://raw.github.com/scala/community-build/$1/nightly.properties" \
    | sed -n 's/nightly=\(.*\)/\1/p'
}
setScalaVersion() {
  vlog "[setScalaVersion] arg = '$1'"
  case "$1" in
    *.head) checkHub; scala_version=$(getScalaHead "$(dropR "$1" 5).x") ;;
    *.next) checkHub; scala_version=$(getScalaNext "$(dropR "$1" 5).x") ;;
         *)           scala_version="$1"
  esac
  [ $? -ne 0 ] && die "Failed to set scala version given arg $1"
  case "$scala_version" in
    *-@(bin|pre)-*SNAPSHOT) addCoursier "-r" && addCoursier "$scala_pr_builds_url" ;;
    *-@(bin|pre)-*)         addCoursier "-r" && addCoursier "$scala_ea_builds_url" ;;
    *+)                     addCoursier "--no-default" && addCoursier "-r=central" ;;
  esac
}
setScalaPrVersion() {
  vlog "[setScalaPrVersion] arg = '$1'"
  local base_version
  checkHub
  base_version=$(getScalaBaseVersion "pull/$1/head")
  [ $? -ne 0 ] && die "Failed to get scala base version for PR $1"
  local prInfo=$(hub api "repos/scala/scala/pulls/$1")
  local sha=$(jq -r '.head.sha' <<< "$prInfo")
  setScalaVersion "$base_version-${sha:0:7}-SNAPSHOT"
}

usage() {
  cat <<EOM
Usage: \$script_name [options]

Where, "script_name" is scala, scalac, scaladoc, or scalap.

All options not specified below are passed through.

  -h | -help         print this message (only when script_name is scala-runner)
  -v                 verbose operation (this runner is chattier)

  # scala version (default: latest.stable, resolved by Couriser)
  -28                        use the latest 2.8.x release
  -29                        use the latest 2.9.x release
  -210                       use the latest 2.10.x release
  -211                       use the latest 2.11.x release
  -212                       use the latest 2.12.x release
  -213                       use the latest 2.13.x release
  -2.12.next                 use the next candidate 2.12.x release (from the community build)
  -2.13.next                 use the next candidate 2.13.x release
  -2.12.head                 use the latest build from the HEAD of the 2.12.x branch (latest "merge-ly")
  -2.13.head                 use the latest build from the HEAD of the 2.13.x branch
  -<version>                 use the specified scala version, e.g. -2.12.2 or -2.13.0-RC3
  --scala-version <version>  use the specified scala version, e.g. --scala-version 2.14-my-test
  --scala-pr <PR number>     use the version of scala built from the specified PR

  # passing options to the jvm
  -Dkey=val         pass -Dkey=val directly to the jvm
  -J-X              pass option -X directly to the jvm

  # passing options to coursier
  -C-X              pass option -X directly to coursier (-C is stripped)
EOM
  exit 0
}

require_arg() {
  local type="$1"
  local opt="$2"
  local arg="$3"

  if [[ -z "$arg" ]] || [[ "${arg:0:1}" == "-" ]]; then
    echo "Aborting: $opt requires <$type> argument"
    exit 1
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
                      -h | -help) [[ "$app_name" == "scala-runner" ]] && usage || residual_args+=("$1") && shift ;;
                              -v) verbose=true && shift ;;
                             -28) setScalaVersion "2.8+"   && shift ;;
                             -29) setScalaVersion "2.9+"   && shift ;;
                            -210) setScalaVersion "2.10+"  && shift ;;
                            -211) setScalaVersion "2.11+"  && shift ;;
                            -212) setScalaVersion "2.12+"  && shift ;;
                            -213) setScalaVersion "2.13+"  && shift ;;
          -2.1[2-4].@(head|next)) setScalaVersion "${1:1}" && shift ;; # 2.1[2-4].head or 2.1[2-4].next
     -2.@([89]|1[0-4]).+([0-9])*) setScalaVersion "${1:1}" && shift ;; # 2.[89].z* or 2.1[0-4].z*
                 --scala-version) require_arg version     "$1" "$2" && setScalaVersion   "$2" && shift 2 ;;
                      --scala-pr) require_arg "PR number" "$1" "$2" && setScalaPrVersion "$2" && shift 2 ;;
                             -C*) addCoursier "${1:2}"     && shift ;;
                             -D*) addJava "$1"             && shift ;;
                             -J*) addJava "${1:2}"         && shift ;;
                               *) residual_args+=("$1")    && shift ;;
  esac
done

execRunner() {
  # print the arguments one to a line, quoting any containing spaces
  vlog "# Executing command line:" && {
    for arg; do
      if [[ -n "$arg" ]]; then
        if printf "%s\n" "$arg" | grep -q ' '; then
          printf >&2 "\"%s\"\n" "$arg"
        else
          printf >&2 "%s\n" "$arg"
        fi
      fi
    done
    vlog ""
  }

  "$@"
}

execRunner cs launch \
  "$app_name:$scala_version" \
  "${java_args[@]}" \
  "${coursier_args[@]}" \
  -- "${residual_args[@]}"
